#+TODO: SUPPLY
* Org Insert Heading Hook 
* css stuff
** key listeners 
Subtree to Props

** copy or add to  _All to parent of stem
fuck
#+begin_src elisp :results silent
(defun class-to-class-list ()
    (org-entry-add-to-multivalued-property interned_bom "someProp_ALL" (org-entry-get nil "ITEM")))
#+end_src

#+begin_src elisp :results silent
(defun class-to-class-list ()
    (org-entry-add-to-multivalued-property parent-of-stem property-at-point property-value))
#+end_src

#+end_src
** css_All sections
*** backgound-color-image
:PROPERTIES:
:BACKGROUND-COLOR_ALL: "" none black white aliceblue  antiquewhite  aqua  aquamarine  azure  beige bisque  black  blanchedalmond  blue  blueviolet  brown burlywood  cadetblue  calc()  chartreuse  chocolate  coral cornflowerblue  cornsilk  crimson  currentColor  cyan  darkblue darkcyan  darkgoldenrod  darkgray  darkgreen  darkgrey  darkkhaki darkmagenta  darkolivegreen  darkorange  darkorchid  darkred  darksalmon darkseagreen  darkslateblue  darkslategray  darkslategrey  darkturquoise  darkviolet dashed  deeppink  deepskyblue  dimgray  dimgrey  dodgerblue dotted  double  firebrick  floralwhite  forestgreen  fuchsia gainsboro  ghostwhite  gold  goldenrod  gray  green greenyellow  grey  groove  hidden  honeydew  hotpink hsl()  hsla()  indianred  indigo  inherit  initial inset  ivory  khaki  lavender  lavenderblush  lawngreen lemonchiffon  lightblue  lightcoral  lightcyan  lightgoldenrodyellow  lightgray lightgreen  lightgrey  lightpink  lightsalmon  lightseagreen  lightskyblue lightslategray  lightslategrey  lightsteelblue  lightyellow  lime  limegreen linen  magenta  maroon  medium  mediumaquamarine  mediumblue mediumorchid  mediumpurple  mediumseagreen  mediumslateblue  mediumspringgreen  mediumturquoise mediumvioletred  midnightblue  mintcream  mistyrose  moccasin  navajowhite navy  none  oldlace  olive  olivedrab  orange orangered  orchid  outset  palegoldenrod  palegreen  paleturquoise palevioletred  papayawhip  peachpuff  peru  pink  plum powderblue  purple  rebeccapurple  red  rgb()  rgba() ridge  rosybrown  royalblue  saddlebrown  salmon  sandybrown seagreen  seashell  sienna  silver  skyblue  slateblue slategray  slategrey  snow  solid  springgreen  steelblue tan  teal  thick  thin  thistle  tomato transparent  turquoise  unset  violet  wheat  white whitesmoke  yellow  yellowgreen
:BACKGROUND-IMAGE_ALL: "" "url('svg/Convergences.svg')" "url('svg/Bogus The Robot.svg')" "url('svg/adhd.svg')"
:END:

*** border-background
:PROPERTIES:
:border-style_All: solid dashed dotted
:line_type_All: solid dashed dotted
:border_All: "1px solid white" "1px solid black" "1px solid red" 
:border-width_All: 0px 1px 2px 3px 4px 5px 6px 7px 8px 9px 10px
:END:
*** color
:PROPERTIES:
:color_all: "" aliceblue  antiquewhite  aqua  aquamarine  azure  beige bisque  black  blanchedalmond  blue  blueviolet  brown burlywood  cadetblue  calc()  chartreuse  chocolate  coral cornflowerblue  cornsilk  crimson  currentColor  cyan  darkblue darkcyan  darkgoldenrod  darkgray  darkgreen  darkgrey  darkkhaki darkmagenta  darkolivegreen  darkorange  darkorchid  darkred  darksalmon darkseagreen  darkslateblue  darkslategray  darkslategrey  darkturquoise  darkviolet dashed  deeppink  deepskyblue  dimgray  dimgrey  dodgerblue dotted  double  firebrick  floralwhite  forestgreen  fuchsia gainsboro  ghostwhite  gold  goldenrod  gray  green greenyellow  grey  groove  hidden  honeydew  hotpink hsl()  hsla()  indianred  indigo  inherit  initial inset  ivory  khaki  lavender  lavenderblush  lawngreen lemonchiffon  lightblue  lightcoral  lightcyan  lightgoldenrodyellow  lightgray lightgreen  lightgrey  lightpink  lightsalmon  lightseagreen  lightskyblue lightslategray  lightslategrey  lightsteelblue  lightyellow  lime  limegreen linen  magenta  maroon  medium  mediumaquamarine  mediumblue mediumorchid  mediumpurple  mediumseagreen  mediumslateblue  mediumspringgreen  mediumturquoise mediumvioletred  midnightblue  mintcream  mistyrose  moccasin  navajowhite navy  none  oldlace  olive  olivedrab  orange orangered  orchid  outset  palegoldenrod  palegreen  paleturquoise palevioletred  papayawhip  peachpuff  peru  pink  plum powderblue  purple  rebeccapurple  red  rgb()  rgba() ridge  rosybrown  royalblue  saddlebrown  salmon  sandybrown seagreen  seashell  sienna  silver  skyblue  slateblue slategray  slategrey  snow  solid  springgreen  steelblue tan  teal  thick  thin  thistle  tomato transparent  turquoise  unset  violet  wheat  white whitesmoke  yellow  yellowgreen
:END:

*** font
:PROPERTIES:
:font-size_All: 0pt 1pt 2pt 3pt 4pt 5pt 6pt 7pt 8pt 9pt 10pt 11pt 12pt 13pt 14pt 15pt 16pt 17pt 18pt 19pt 20pt 30pt 40pt 50pt 60pt 70pt 80pt 90pt 100pt
:END:
*** padding-margin
:PROPERTIES:
:margin_All: 5pt 10pt  auto
:padding_All: 5px 10px auto
:END:
*** position-display-flex
:PROPERTIES:
:position_All: static relative absolute sticky fixed
:display_All: none block flex inline
:flex_All: direction 
:flex-direction_All: row column
:align-items_All: flex-start flex-end left center stretch baseline
:align-content_All: flex-start flex-end center space-between space-around stretch space-evenly
:justify-content_All: flex-start flex-end space-between space-around stretch space-evenly
:END:


** css-partials
for concatenation
*** margin-padding
:PROPERTIES:
:padding_All: left top right bottom
:padding_All: padding padding-left padding-right padding-top padding-bottom
:margin_All: left top right bottom
:END:
*** stacker
:PROPERTIES:
:css_All: display border position color font-size margin padding width height border-width border-color border padding margin color font-size font-family font-weight position display background-color
:selector_All: .box .square h1 h2 h3 outline-1 outline-2 Keys Classic
:END:

*** units
:PROPERTIES:
:units_All: px em vh vw pt
:color_unit_All: rgb hex hsl
:unit_All: px pt % em vh vw
:px_All: 1 2 3 4 5 6 7 8 9 0 
:pt_All: 1 2 3 4 5 6 7 8 9 0 
:%_All: 1 2 3 4 5 6 7 8 9 0 
:em_All: 1 2 3 4 5 6 7 8 9 0 
:seq_All: 1 3 4
:seq:      4
:rule_All: 0 1 2 3 4 5 6 7 8 9 10
:property_All: 0 1 2 3 4 5 6 7 8 9 10 11
:int_All:  1 2 3 4 5 6 7 8 9 0 
:END:

*** borders
:PROPERTIES:
:side_All: all top bottom left right 
:END:





** upstream definitions
*** units
:PROPERTIES:
:unit_All: px pt % em vh vw
:px_All: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 
:pt_All: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 
:%_All: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 
:em_All: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 
:padding_All:  "4pt 7% 14px 24pt"
:END:
(setf c 10) 
(progn (while (> 100 c) (progn (insert (format "%s " c)) (setf c (+ c 1)))))
*** padding
:PROPERTIES:
:padding-top: 34pt
:padding-right: 17px
:padding-bottom: 7%
:padding-left: 4pt
:padding:  34pt 17px 7% 4pt
:END:
*** make-short-version
#+NAME: make-short-version
#+BEGIN_SRC elisp :results value 
(org-entry-delete nil "padding")
(setf pad-str (cdr (org-entry-properties nil 'standard)))
(setf padding (mapconcat 'concat (nreverse (mapcar 'cdr pad-str)) " "))
(org-entry-put nil "padding" padding)
;;(org-entry-add-to-multivalued-property nil "padding_All" (format "%s" padding))
#+END_SRC

#+RESULTS: make-short-version

** proc-units
#+NAME: proc-units
#+BEGIN_SRC elisp :results silent
(setf fig (cdr (org-entry-properties nil 'standard)))
(setf mea (concat (cdr (car fig)) (downcase (car (car fig)))))
(org-todo) 
(org-todo)
(org-todo)  
(org-entry-put nil sender mea)
(mapcar 'org-delete-property (mapcar 'car (org-entry-properties nil 'standard)))

#+END_SRC

*** UPSTREAM padding-top
:PROPERTIES:
:unit:     px
:pt:       33
:END:
*** UPSTREAM padding-right
:PROPERTIES:
:unit:     vh
:px:       17
:END:

*** UPSTREAM padding-bottom
:PROPERTIES:
:unit:     px
:%:        7
:END:

*** UPSTREAM padding-left
:PROPERTIES:
:unit:     %
:pt:       4
:END:
  


** arp666
*** Engine.js
#+BEGIN_SRC css :results value 
html{
    background: black;
    color: gray;
}

.App {

}

.nav {
    width: 95%;
    padding: 1vw;
    margin: 5vh auto;
}

.engine {
    display: flex;
    flex-flow: column wrap;
    align-items: center;
}
.app-title {
    font-size: x-large;
    font-style: italic;
    font-weight: bold;
}
.engine > .ins-header {
    background: #111133AA;
    color: white;
    border-bottom: 5px solid teal;
    width: 95%;
    position: fixed;
    z-index: 10;
}
.global-ins {
    margin-top: -24vh;
    transition: all 0.25s;
}

.global-ins:hover {
   margin-top: 0vh
}
.engine > * {
    opacity: 1;
}

.engine > .ins-header:hover {
    user-selectable: none;
    border-bottom: 5px solid white;
}

.engine > .ins > .panel {
    justify-content: center;
    position: fixed;
    z-index: 10;
}


.panel {
    margin: 1vh auto;
    font-size: 0.75em;
    padding: 5px;
    border: 0.25px solid grey;
    display: flex;
    flex-flow: row wrap;
    flex: 0 0 45%;
    align-items: center;
    justify-content: center;
                   
}

.panel > button {
    width: 20%;
    height: 4.6vh;
    min-width: 75px;
    min-height: 50px;
    margin: auto 0;
    font-size: x-small;
    background: #111122aa;
    color: white;
    border: 0.5px solid darkslategrey;
}

button:hover {
    background: yellow;
    color: black;
}

button {
    /*transition: all 0.5s;*/
}



.legals {
    font-size: x-small;
    color: teal;
}

.control {
    flex-basis: 25%;
}

.input {
    width: 50%
}

.text-input {
    
}

.slider {
    width: 85px;
    padding: 0 0;
    margin: 1vh 0;
    
}

.blinker.note-on {
    background: yellow;
}


button.t-note-on  {
    background: yellow;
    color: black
}

button.t-note-off  {
    background: none;
    color: white;
}

#+END_SRC
*** Keyboard.css
#+NAME: arp-keys
#+BEGIN_SRC css :results value 
.app-body {
    padding-top: 6vh;
}

.keyboard {
    width: 95%;
    display: flex;
    flex-flow: row wrap;
    margin: 1vh auto;
    justify-content: center;
    
}

.keyboard-outer {
    width: 100%;
    display: flex;
    flex-flow: row wrap;
}
.keyboard > * {
    padding: 0px 0px;
    position: relative;

}
.messages {
    font-size: small;
    width: 75%;
    text-align: center;
    margin-top: 1vh;
    color: darkslategray;
    transition: all 0.5s;
}

.messages:hover {
    color: white;
}

.key {
    margin-top: 0px;
}

.key-inner:hover{
    background: teal;
    color: white;
}

.key-inner {
    border: 0.25px solid white;
    height: 100%;
    width: 100%;
    padding: 0px 0px;
    background: black;
    color: white;
}

.instruments {
    margin: 0 auto;
    width: 95%;
}

.nav-top {
    display: flex;
    justify-content: space-between;
}

.rhs-tabs > button, .lhs-tabs > button {
    width: 120px;
    height: 4.6vh;
    min-width: 50px;
    min-height: 50px;
    margin: auto 0;
    font-size: x-small;
    background: none;
    color: white;
}

button:hover {
    background: yellow;
    color: black;
}

button {
    transition: all 0.25s;
}


.lhs-tabs {
    
}

#addSeq {
    font-size: xx-large;
    text-align: center;
    vertical-align: middle;
}

.rhs-tabs, .lhs-tabs {
   
}

.white-key {
    margin: 0%;
    width: 4.6%;
    height: 200px;
    transition: all 0.5s;
}

.black-key {
    margin: 0 -2.3%;
    width: 4.6%;
    height: 130px;
    transition: all 0.5s;
}


@media (min-width: 1024px) {
    /*.white-key, .black-key {
	width: 2.3%
    }
    .black-key {
	margin:  0 -1.15%;
    }*/
}

@media (max-width: 800px) {
    .white-key, .black-key {
	width: 6.9%;
  }
    .black-key {
	margin:  0 -3.45%;
  }
}

@media (max-width: 480px) {
    .keyboard {
        width: 85%;
    }
    .white-key, .black-key {
	width: 14.28%;
        height: 33vh;
        max-height: 175px;
  }
    .black-key {
	margin:  0 -7.14%;
        height: 16vh;
        max-height: 95px;
    }

    .panel {
        justify-content: center;
    }
    .messages {
        display: none;
    }
}

@media (min-width: 1440px) {
    .keyboard-outer {
        display: flex;
        align-items: flex-start;
        flex-flow: row nowrap;
    }
    .instruments {
        flex: 1 1 50%;
        width: 50%;
    }
    .engine {
        flex: 1 1 50%
    }
    .engine > .ins-header {
    }
    .keyboard {
        flex: 1 0 50%
    }
    .white-key, .black-key {
	width: 6.9%;
    }
    .black-key {
	margin:  0 -3.45%;
    }
    
}

.squares {
    margin-left:  0;
    margin-right:  0;
    width: 50px;
    height: 50px;
}

.logarithmic{
    padding : 0px;
    height: 15vh;
    margin-left:  0px;
    margin-right:  0px;
}

.octave {
    width: 8.33%;
}


.press > .key-inner {
    background-color: black;
}

.key.bass > .key-inner {
    background: blue;
    color: white;
}

.key.treble > .key-inner {
    background: red;
    color: white;
}

.role.bass > .key-inner {
    background: blue;
    color: white;
}

.role.treble > .key-inner {
    background: red;
    color: white;
}

.role > .key-inner {
    text-transform: capitalize;
    font-weight: bold;
    font-style: italic;
}

.bass , .treble {
    display: inline;
}

.rhs-tabs > .bass {
    background: blue;
}

.rhs-tabs > .treble {
    background: red;
}


.bass.note-on > .key-inner {
    background: blue;
    color: black
}

.treble.note-on > .key-inner {
    background: red;
    color: black
}

.note-on > .key-inner {
    background: white;
    color: black
}

.rail {
    margin-top: 5px;
    width: 100%;
    height: 2.5vh;
    border: 0.5px solid currentColor;
}

#+END_SRC
*** Keys.css
#+NAME: keys
#+BEGIN_SRC css :results value 
.key-text {
    text-align: center;
    font-size: 0.50em;
    position: absolute;
    bottom: 0px;
    margin: 0 auto;
    width: 100%;
    user-select: none;
    overflow: hidden;
    color: currentColor;
}

.black-key {
    z-index: 1;
}

.white-key {
    z-index : 0;
}

.qwert {
    font-weight: bold;
    font-size: 13pt;
    color: yellow;
}


#+END_SRC


* fragments
** doc-just-scripts
:PROPERTIES:
:out:      file
:indium: ~/www/public_html
:html:     ~/www/public_html/parser.php
:css:      ~/www/public_html/parser.css
:js:       ~/www/public_html/parser.js
:END:
*** html
**** head
***** link
:PROPERTIES:
:rel:      stylesheet
:type:     text/css
:href:     parser.css
:END:
***** script
console.log("script tag")
***** script
:PROPERTIES:
:type:     text/javascript
:src:     parser.js
:END:
**** body
***** .main
main
** doc-larry-curly-mo-svg
:PROPERTIES:
:out:      file
:indium: ~/www/public_html
:html:     ~/www/public_html/parser.php
:css:      ~/www/public_html/parser.css
:js:       ~/www/public_html/parser.js
:END:
*** html
**** head
***** link
:PROPERTIES:
:rel:      stylesheet
:type:     text/css
:href:     parser.css
:END:
***** script
console.log("script tag")
***** script
:PROPERTIES:
:type:     text/javascript
:src:     parser.js
:END:
**** body
***** .larry-curly-mo
#+begin_src elisp :results silent
(message "Source block %s" (org-entry-get nil "ITEM"))
#+end_src
****** .curly
:PROPERTIES:
:display:  block
:width: 33vw
:border:   1px solid white
:COLOR:    darkorange
:background-size: 150%
:BACKGROUND-IMAGE:
:background-position: center
:background-repeat: no-repeat
:BACKGROUND-COLOR: navy
:FONT-SIZE: 60pt
:HEIGHT:
:END:
Curly
******* .para
:PROPERTIES:
:display:  block
:font-size: 10pt
:BACKGROUND-COLOR: unset
:color:    chartreuse
:HEIGHT:
:END:
C-c C-x C-c 
C-c C-c
< > 

a : set alowable values

(setq org-use-property-inheritance t)
******* .para
C-c C-k (instead if tab)
******* .para
q e r|g v a 1 2 3 4 5 6 7 8 9
******* .para
M-S-<Right> M-S-<Left> : add existing property
****** .larry
:PROPERTIES:
:display:  inline
:width: 33vw
:border:   1px solid white
:COLOR:    darkmagenta
:FONT-SIZE: 30pt
:background-size: 85%
:BACKGROUND-IMAGE:
:background-position: center
:background-repeat: no-repeat
:BACKGROUND-COLOR:
:HEIGHT:   50vh
:END:
Larry
****** .mo
:PROPERTIES:
:display:  inline
:width:    33vw
:BACKGROUND-COLOR:
:border:   1px solid white
:COLOR:    blueviolet
:BACKGROUND-IMAGE:
:width: 100%   
:background-position: center
:background-size: 120%
:background-repeat: no-repeat
:HEIGHT:   95vh
:FONT-SIZE: 50pt
:END:
Mo
***** .three-view
:PROPERTIES:
:BACKGROUND-COLOR: unset
:font-family: sans-serif
:FONT-SIZE: 90pt
:COLOR:
:border:   1px solid black
:display:  flex
:width: 95vw
:HEIGHT:   75vh
:HEIGHT_ALL: "" 25vh 50vh 75vh 95vh
:BACKGROUND-IMAGE:
:BACKGROUND-IMAGE_ALL: "" "url('svg/Convergences.svg')" "url('svg/Bogus The Robot.svg')" "url('svg/adhd.svg')"
:END:
#+begin_src elisp :results silent
(message "Source block %s" (org-entry-get nil "ITEM"))
#+end_src
****** .curly
:PROPERTIES:
:display:  block
:width: 33vw
:border:   1px solid white
:COLOR:    darkmagenta
:background-size: 150%
:BACKGROUND-IMAGE:
:background-position: center
:background-repeat: no-repeat
:BACKGROUND-COLOR:
:FONT-SIZE: 90pt
:HEIGHT:
:END:
Curly
****** .larry
:PROPERTIES:
:display:  inline
:width: 33vw
:border:   1px solid white
:COLOR:    darkcyan
:FONT-SIZE: 90pt
:background-size: 85%
:BACKGROUND-IMAGE:
:background-position: center
:background-repeat: no-repeat
:BACKGROUND-COLOR: black
:HEIGHT:
:END:
Larry
****** .mo
:PROPERTIES:
:display:  inline
:width:    33vw
:BACKGROUND-COLOR:
:border:   1px solid white
:COLOR:    antiquewhite
:BACKGROUND-IMAGE:
:width: 100%   
:background-position: center
:background-size: 120%
:background-repeat: no-repeat
:HEIGHT:
:FONT-SIZE: 90pt
:END:
Mo
***** bogus
:PROPERTIES:
:BACKGROUND-COLOR: unset
:font-family: sans-serif
:font-size: 90pt
:color:
:border:   1px solid black
:display:  flex
:width: 95vw
:HEIGHT:   95vh
:HEIGHT_ALL: "" 25vh 50vh 75vh 95vh
:BACKGROUND-IMAGE:
:BACKGROUND-IMAGE_ALL: "" "url('svg/Convergences.svg')" "url('svg/Bogus The Robot.svg')" "url('svg/adhd.svg')"
:END:
** stargate-script-tag
*** script
#+begin_src js :results output
var container, stats;
var camera, scene, renderer;
var cube, plane;
var targetRotation = 0;
var targetRotationOnMouseDown = 0;
var mouseX = 0;
var mouseXOnMouseDown = 0;
var windowHalfX = window.innerWidth / 2;
var windowHalfY = window.innerHeight / 2;
var clock = new THREE.Clock();
init();
animate();
function init() {
  container = document.createElement('div');
  document.body.appendChild(container);
  camera = new THREE.PerspectiveCamera(170, window.innerWidth / window.innerHeight, 1, 10000);
  //camera = new THREE.PerspectiveCamera( 25, SCREEN_WIDTH / SCREEN_HEIGHT, 50, 1e7 );
  //camera.position.y = 150;
  camera.position.z = 400;
  controls = new THREE.FlyControls(camera);
  controls.movementSpeed = 500;
  controls.domElement = container;
  controls.rollSpeed = Math.PI / 24;
  controls.autoForward = false;
  controls.dragToLook = false;
  controls.mouseStatus = 0;
  controls.dragToLook = true;
  scene = new THREE.Scene();
  this.scene = scene;
  // Cube
  var geometry = new THREE.CubeGeometry(400, 900, 100);
  for (var i = 0; i < geometry.faces.length; i += 2) {
    var hex = Math.random() * 0xffffff;
    geometry.faces[i].color.setHex(hex);
    geometry.faces[i + 1].color.setHex(hex);
  }
  var material = new THREE.MeshBasicMaterial({
    vertexColors: THREE.FaceColors,
    overdraw: 0.5
  });
  cube = new THREE.Mesh(geometry, material);
  //cube.position.y = 150;
  scene.add(cube);
  //circle
  var circleGeom = new THREE.CircleGeometry(500, 72);
  var circleStroke = new THREE.LineBasicMaterial({linewidth: 1, color: 0xFFFFFF, transparent: false});
  var circleLine = new THREE.Line(circleGeom, circleStroke);
  circleGeom.vertices.shift();
  this.circleLine = circleLine;
  scene.add(circleLine);
  circleLine.position.z = 0;
  circleLine.rotation.y = 0.5*Math.PI;
  // Plane
  renderer = new THREE.CanvasRenderer();
  renderer.setSize(window.innerWidth, window.innerHeight);
  container.appendChild(renderer.domElement);
  window.addEventListener('resize', onWindowResize, false);
}
function onWindowResize() {
  windowHalfX = window.innerWidth / 2;
  windowHalfY = window.innerHeight / 2;
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(window.innerWidth, window.innerHeight);
}
function animate() {
  requestAnimationFrame(animate);
  render();
}
function render() {
  var delta = clock.getDelta();
  trigShape();
  controls.update(delta);
  //plane.rotation.y = cube.rotation.y += (targetRotation - cube.rotation.y) * 0.05;
  updateStargate(delta);
  renderer.render(scene, camera);
}
#+end_src
